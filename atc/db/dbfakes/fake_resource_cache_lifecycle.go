// Code generated by counterfeiter. DO NOT EDIT.
package dbfakes

import (
	"sync"

	"code.cloudfoundry.org/lager"
	"github.com/pf-qiu/concourse/v6/atc/db"
)

type FakeResourceCacheLifecycle struct {
	CleanBuildImageResourceCachesStub        func(lager.Logger) error
	cleanBuildImageResourceCachesMutex       sync.RWMutex
	cleanBuildImageResourceCachesArgsForCall []struct {
		arg1 lager.Logger
	}
	cleanBuildImageResourceCachesReturns struct {
		result1 error
	}
	cleanBuildImageResourceCachesReturnsOnCall map[int]struct {
		result1 error
	}
	CleanUpInvalidCachesStub        func(lager.Logger) error
	cleanUpInvalidCachesMutex       sync.RWMutex
	cleanUpInvalidCachesArgsForCall []struct {
		arg1 lager.Logger
	}
	cleanUpInvalidCachesReturns struct {
		result1 error
	}
	cleanUpInvalidCachesReturnsOnCall map[int]struct {
		result1 error
	}
	CleanUsesForFinishedBuildsStub        func(lager.Logger) error
	cleanUsesForFinishedBuildsMutex       sync.RWMutex
	cleanUsesForFinishedBuildsArgsForCall []struct {
		arg1 lager.Logger
	}
	cleanUsesForFinishedBuildsReturns struct {
		result1 error
	}
	cleanUsesForFinishedBuildsReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeResourceCacheLifecycle) CleanBuildImageResourceCaches(arg1 lager.Logger) error {
	fake.cleanBuildImageResourceCachesMutex.Lock()
	ret, specificReturn := fake.cleanBuildImageResourceCachesReturnsOnCall[len(fake.cleanBuildImageResourceCachesArgsForCall)]
	fake.cleanBuildImageResourceCachesArgsForCall = append(fake.cleanBuildImageResourceCachesArgsForCall, struct {
		arg1 lager.Logger
	}{arg1})
	fake.recordInvocation("CleanBuildImageResourceCaches", []interface{}{arg1})
	fake.cleanBuildImageResourceCachesMutex.Unlock()
	if fake.CleanBuildImageResourceCachesStub != nil {
		return fake.CleanBuildImageResourceCachesStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.cleanBuildImageResourceCachesReturns
	return fakeReturns.result1
}

func (fake *FakeResourceCacheLifecycle) CleanBuildImageResourceCachesCallCount() int {
	fake.cleanBuildImageResourceCachesMutex.RLock()
	defer fake.cleanBuildImageResourceCachesMutex.RUnlock()
	return len(fake.cleanBuildImageResourceCachesArgsForCall)
}

func (fake *FakeResourceCacheLifecycle) CleanBuildImageResourceCachesCalls(stub func(lager.Logger) error) {
	fake.cleanBuildImageResourceCachesMutex.Lock()
	defer fake.cleanBuildImageResourceCachesMutex.Unlock()
	fake.CleanBuildImageResourceCachesStub = stub
}

func (fake *FakeResourceCacheLifecycle) CleanBuildImageResourceCachesArgsForCall(i int) lager.Logger {
	fake.cleanBuildImageResourceCachesMutex.RLock()
	defer fake.cleanBuildImageResourceCachesMutex.RUnlock()
	argsForCall := fake.cleanBuildImageResourceCachesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeResourceCacheLifecycle) CleanBuildImageResourceCachesReturns(result1 error) {
	fake.cleanBuildImageResourceCachesMutex.Lock()
	defer fake.cleanBuildImageResourceCachesMutex.Unlock()
	fake.CleanBuildImageResourceCachesStub = nil
	fake.cleanBuildImageResourceCachesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeResourceCacheLifecycle) CleanBuildImageResourceCachesReturnsOnCall(i int, result1 error) {
	fake.cleanBuildImageResourceCachesMutex.Lock()
	defer fake.cleanBuildImageResourceCachesMutex.Unlock()
	fake.CleanBuildImageResourceCachesStub = nil
	if fake.cleanBuildImageResourceCachesReturnsOnCall == nil {
		fake.cleanBuildImageResourceCachesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.cleanBuildImageResourceCachesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeResourceCacheLifecycle) CleanUpInvalidCaches(arg1 lager.Logger) error {
	fake.cleanUpInvalidCachesMutex.Lock()
	ret, specificReturn := fake.cleanUpInvalidCachesReturnsOnCall[len(fake.cleanUpInvalidCachesArgsForCall)]
	fake.cleanUpInvalidCachesArgsForCall = append(fake.cleanUpInvalidCachesArgsForCall, struct {
		arg1 lager.Logger
	}{arg1})
	fake.recordInvocation("CleanUpInvalidCaches", []interface{}{arg1})
	fake.cleanUpInvalidCachesMutex.Unlock()
	if fake.CleanUpInvalidCachesStub != nil {
		return fake.CleanUpInvalidCachesStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.cleanUpInvalidCachesReturns
	return fakeReturns.result1
}

func (fake *FakeResourceCacheLifecycle) CleanUpInvalidCachesCallCount() int {
	fake.cleanUpInvalidCachesMutex.RLock()
	defer fake.cleanUpInvalidCachesMutex.RUnlock()
	return len(fake.cleanUpInvalidCachesArgsForCall)
}

func (fake *FakeResourceCacheLifecycle) CleanUpInvalidCachesCalls(stub func(lager.Logger) error) {
	fake.cleanUpInvalidCachesMutex.Lock()
	defer fake.cleanUpInvalidCachesMutex.Unlock()
	fake.CleanUpInvalidCachesStub = stub
}

func (fake *FakeResourceCacheLifecycle) CleanUpInvalidCachesArgsForCall(i int) lager.Logger {
	fake.cleanUpInvalidCachesMutex.RLock()
	defer fake.cleanUpInvalidCachesMutex.RUnlock()
	argsForCall := fake.cleanUpInvalidCachesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeResourceCacheLifecycle) CleanUpInvalidCachesReturns(result1 error) {
	fake.cleanUpInvalidCachesMutex.Lock()
	defer fake.cleanUpInvalidCachesMutex.Unlock()
	fake.CleanUpInvalidCachesStub = nil
	fake.cleanUpInvalidCachesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeResourceCacheLifecycle) CleanUpInvalidCachesReturnsOnCall(i int, result1 error) {
	fake.cleanUpInvalidCachesMutex.Lock()
	defer fake.cleanUpInvalidCachesMutex.Unlock()
	fake.CleanUpInvalidCachesStub = nil
	if fake.cleanUpInvalidCachesReturnsOnCall == nil {
		fake.cleanUpInvalidCachesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.cleanUpInvalidCachesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeResourceCacheLifecycle) CleanUsesForFinishedBuilds(arg1 lager.Logger) error {
	fake.cleanUsesForFinishedBuildsMutex.Lock()
	ret, specificReturn := fake.cleanUsesForFinishedBuildsReturnsOnCall[len(fake.cleanUsesForFinishedBuildsArgsForCall)]
	fake.cleanUsesForFinishedBuildsArgsForCall = append(fake.cleanUsesForFinishedBuildsArgsForCall, struct {
		arg1 lager.Logger
	}{arg1})
	fake.recordInvocation("CleanUsesForFinishedBuilds", []interface{}{arg1})
	fake.cleanUsesForFinishedBuildsMutex.Unlock()
	if fake.CleanUsesForFinishedBuildsStub != nil {
		return fake.CleanUsesForFinishedBuildsStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.cleanUsesForFinishedBuildsReturns
	return fakeReturns.result1
}

func (fake *FakeResourceCacheLifecycle) CleanUsesForFinishedBuildsCallCount() int {
	fake.cleanUsesForFinishedBuildsMutex.RLock()
	defer fake.cleanUsesForFinishedBuildsMutex.RUnlock()
	return len(fake.cleanUsesForFinishedBuildsArgsForCall)
}

func (fake *FakeResourceCacheLifecycle) CleanUsesForFinishedBuildsCalls(stub func(lager.Logger) error) {
	fake.cleanUsesForFinishedBuildsMutex.Lock()
	defer fake.cleanUsesForFinishedBuildsMutex.Unlock()
	fake.CleanUsesForFinishedBuildsStub = stub
}

func (fake *FakeResourceCacheLifecycle) CleanUsesForFinishedBuildsArgsForCall(i int) lager.Logger {
	fake.cleanUsesForFinishedBuildsMutex.RLock()
	defer fake.cleanUsesForFinishedBuildsMutex.RUnlock()
	argsForCall := fake.cleanUsesForFinishedBuildsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeResourceCacheLifecycle) CleanUsesForFinishedBuildsReturns(result1 error) {
	fake.cleanUsesForFinishedBuildsMutex.Lock()
	defer fake.cleanUsesForFinishedBuildsMutex.Unlock()
	fake.CleanUsesForFinishedBuildsStub = nil
	fake.cleanUsesForFinishedBuildsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeResourceCacheLifecycle) CleanUsesForFinishedBuildsReturnsOnCall(i int, result1 error) {
	fake.cleanUsesForFinishedBuildsMutex.Lock()
	defer fake.cleanUsesForFinishedBuildsMutex.Unlock()
	fake.CleanUsesForFinishedBuildsStub = nil
	if fake.cleanUsesForFinishedBuildsReturnsOnCall == nil {
		fake.cleanUsesForFinishedBuildsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.cleanUsesForFinishedBuildsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeResourceCacheLifecycle) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.cleanBuildImageResourceCachesMutex.RLock()
	defer fake.cleanBuildImageResourceCachesMutex.RUnlock()
	fake.cleanUpInvalidCachesMutex.RLock()
	defer fake.cleanUpInvalidCachesMutex.RUnlock()
	fake.cleanUsesForFinishedBuildsMutex.RLock()
	defer fake.cleanUsesForFinishedBuildsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeResourceCacheLifecycle) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ db.ResourceCacheLifecycle = new(FakeResourceCacheLifecycle)
