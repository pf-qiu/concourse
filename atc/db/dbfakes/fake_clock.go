// Code generated by counterfeiter. DO NOT EDIT.
package dbfakes

import (
	"sync"
	"time"

	"github.com/pf-qiu/concourse/v6/atc/db"
)

type FakeClock struct {
	NowStub        func() time.Time
	nowMutex       sync.RWMutex
	nowArgsForCall []struct {
	}
	nowReturns struct {
		result1 time.Time
	}
	nowReturnsOnCall map[int]struct {
		result1 time.Time
	}
	UntilStub        func(time.Time) time.Duration
	untilMutex       sync.RWMutex
	untilArgsForCall []struct {
		arg1 time.Time
	}
	untilReturns struct {
		result1 time.Duration
	}
	untilReturnsOnCall map[int]struct {
		result1 time.Duration
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClock) Now() time.Time {
	fake.nowMutex.Lock()
	ret, specificReturn := fake.nowReturnsOnCall[len(fake.nowArgsForCall)]
	fake.nowArgsForCall = append(fake.nowArgsForCall, struct {
	}{})
	fake.recordInvocation("Now", []interface{}{})
	fake.nowMutex.Unlock()
	if fake.NowStub != nil {
		return fake.NowStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.nowReturns
	return fakeReturns.result1
}

func (fake *FakeClock) NowCallCount() int {
	fake.nowMutex.RLock()
	defer fake.nowMutex.RUnlock()
	return len(fake.nowArgsForCall)
}

func (fake *FakeClock) NowCalls(stub func() time.Time) {
	fake.nowMutex.Lock()
	defer fake.nowMutex.Unlock()
	fake.NowStub = stub
}

func (fake *FakeClock) NowReturns(result1 time.Time) {
	fake.nowMutex.Lock()
	defer fake.nowMutex.Unlock()
	fake.NowStub = nil
	fake.nowReturns = struct {
		result1 time.Time
	}{result1}
}

func (fake *FakeClock) NowReturnsOnCall(i int, result1 time.Time) {
	fake.nowMutex.Lock()
	defer fake.nowMutex.Unlock()
	fake.NowStub = nil
	if fake.nowReturnsOnCall == nil {
		fake.nowReturnsOnCall = make(map[int]struct {
			result1 time.Time
		})
	}
	fake.nowReturnsOnCall[i] = struct {
		result1 time.Time
	}{result1}
}

func (fake *FakeClock) Until(arg1 time.Time) time.Duration {
	fake.untilMutex.Lock()
	ret, specificReturn := fake.untilReturnsOnCall[len(fake.untilArgsForCall)]
	fake.untilArgsForCall = append(fake.untilArgsForCall, struct {
		arg1 time.Time
	}{arg1})
	fake.recordInvocation("Until", []interface{}{arg1})
	fake.untilMutex.Unlock()
	if fake.UntilStub != nil {
		return fake.UntilStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.untilReturns
	return fakeReturns.result1
}

func (fake *FakeClock) UntilCallCount() int {
	fake.untilMutex.RLock()
	defer fake.untilMutex.RUnlock()
	return len(fake.untilArgsForCall)
}

func (fake *FakeClock) UntilCalls(stub func(time.Time) time.Duration) {
	fake.untilMutex.Lock()
	defer fake.untilMutex.Unlock()
	fake.UntilStub = stub
}

func (fake *FakeClock) UntilArgsForCall(i int) time.Time {
	fake.untilMutex.RLock()
	defer fake.untilMutex.RUnlock()
	argsForCall := fake.untilArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClock) UntilReturns(result1 time.Duration) {
	fake.untilMutex.Lock()
	defer fake.untilMutex.Unlock()
	fake.UntilStub = nil
	fake.untilReturns = struct {
		result1 time.Duration
	}{result1}
}

func (fake *FakeClock) UntilReturnsOnCall(i int, result1 time.Duration) {
	fake.untilMutex.Lock()
	defer fake.untilMutex.Unlock()
	fake.UntilStub = nil
	if fake.untilReturnsOnCall == nil {
		fake.untilReturnsOnCall = make(map[int]struct {
			result1 time.Duration
		})
	}
	fake.untilReturnsOnCall[i] = struct {
		result1 time.Duration
	}{result1}
}

func (fake *FakeClock) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.nowMutex.RLock()
	defer fake.nowMutex.RUnlock()
	fake.untilMutex.RLock()
	defer fake.untilMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClock) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ db.Clock = new(FakeClock)
