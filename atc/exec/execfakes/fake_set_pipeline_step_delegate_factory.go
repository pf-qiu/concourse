// Code generated by counterfeiter. DO NOT EDIT.
package execfakes

import (
	"sync"

	"github.com/pf-qiu/concourse/v6/atc/exec"
)

type FakeSetPipelineStepDelegateFactory struct {
	SetPipelineStepDelegateStub        func(exec.RunState) exec.SetPipelineStepDelegate
	setPipelineStepDelegateMutex       sync.RWMutex
	setPipelineStepDelegateArgsForCall []struct {
		arg1 exec.RunState
	}
	setPipelineStepDelegateReturns struct {
		result1 exec.SetPipelineStepDelegate
	}
	setPipelineStepDelegateReturnsOnCall map[int]struct {
		result1 exec.SetPipelineStepDelegate
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSetPipelineStepDelegateFactory) SetPipelineStepDelegate(arg1 exec.RunState) exec.SetPipelineStepDelegate {
	fake.setPipelineStepDelegateMutex.Lock()
	ret, specificReturn := fake.setPipelineStepDelegateReturnsOnCall[len(fake.setPipelineStepDelegateArgsForCall)]
	fake.setPipelineStepDelegateArgsForCall = append(fake.setPipelineStepDelegateArgsForCall, struct {
		arg1 exec.RunState
	}{arg1})
	fake.recordInvocation("SetPipelineStepDelegate", []interface{}{arg1})
	fake.setPipelineStepDelegateMutex.Unlock()
	if fake.SetPipelineStepDelegateStub != nil {
		return fake.SetPipelineStepDelegateStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.setPipelineStepDelegateReturns
	return fakeReturns.result1
}

func (fake *FakeSetPipelineStepDelegateFactory) SetPipelineStepDelegateCallCount() int {
	fake.setPipelineStepDelegateMutex.RLock()
	defer fake.setPipelineStepDelegateMutex.RUnlock()
	return len(fake.setPipelineStepDelegateArgsForCall)
}

func (fake *FakeSetPipelineStepDelegateFactory) SetPipelineStepDelegateCalls(stub func(exec.RunState) exec.SetPipelineStepDelegate) {
	fake.setPipelineStepDelegateMutex.Lock()
	defer fake.setPipelineStepDelegateMutex.Unlock()
	fake.SetPipelineStepDelegateStub = stub
}

func (fake *FakeSetPipelineStepDelegateFactory) SetPipelineStepDelegateArgsForCall(i int) exec.RunState {
	fake.setPipelineStepDelegateMutex.RLock()
	defer fake.setPipelineStepDelegateMutex.RUnlock()
	argsForCall := fake.setPipelineStepDelegateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSetPipelineStepDelegateFactory) SetPipelineStepDelegateReturns(result1 exec.SetPipelineStepDelegate) {
	fake.setPipelineStepDelegateMutex.Lock()
	defer fake.setPipelineStepDelegateMutex.Unlock()
	fake.SetPipelineStepDelegateStub = nil
	fake.setPipelineStepDelegateReturns = struct {
		result1 exec.SetPipelineStepDelegate
	}{result1}
}

func (fake *FakeSetPipelineStepDelegateFactory) SetPipelineStepDelegateReturnsOnCall(i int, result1 exec.SetPipelineStepDelegate) {
	fake.setPipelineStepDelegateMutex.Lock()
	defer fake.setPipelineStepDelegateMutex.Unlock()
	fake.SetPipelineStepDelegateStub = nil
	if fake.setPipelineStepDelegateReturnsOnCall == nil {
		fake.setPipelineStepDelegateReturnsOnCall = make(map[int]struct {
			result1 exec.SetPipelineStepDelegate
		})
	}
	fake.setPipelineStepDelegateReturnsOnCall[i] = struct {
		result1 exec.SetPipelineStepDelegate
	}{result1}
}

func (fake *FakeSetPipelineStepDelegateFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.setPipelineStepDelegateMutex.RLock()
	defer fake.setPipelineStepDelegateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSetPipelineStepDelegateFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ exec.SetPipelineStepDelegateFactory = new(FakeSetPipelineStepDelegateFactory)
