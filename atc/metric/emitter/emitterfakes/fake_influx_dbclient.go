// Code generated by counterfeiter. DO NOT EDIT.
package emitterfakes

import (
	"sync"
	"time"

	"github.com/pf-qiu/concourse/v6/atc/metric/emitter"
	client "github.com/influxdata/influxdb1-client/v2"
)

type FakeInfluxDBClient struct {
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct {
	}
	closeReturns struct {
		result1 error
	}
	closeReturnsOnCall map[int]struct {
		result1 error
	}
	PingStub        func(time.Duration) (time.Duration, string, error)
	pingMutex       sync.RWMutex
	pingArgsForCall []struct {
		arg1 time.Duration
	}
	pingReturns struct {
		result1 time.Duration
		result2 string
		result3 error
	}
	pingReturnsOnCall map[int]struct {
		result1 time.Duration
		result2 string
		result3 error
	}
	QueryStub        func(client.Query) (*client.Response, error)
	queryMutex       sync.RWMutex
	queryArgsForCall []struct {
		arg1 client.Query
	}
	queryReturns struct {
		result1 *client.Response
		result2 error
	}
	queryReturnsOnCall map[int]struct {
		result1 *client.Response
		result2 error
	}
	QueryAsChunkStub        func(client.Query) (*client.ChunkedResponse, error)
	queryAsChunkMutex       sync.RWMutex
	queryAsChunkArgsForCall []struct {
		arg1 client.Query
	}
	queryAsChunkReturns struct {
		result1 *client.ChunkedResponse
		result2 error
	}
	queryAsChunkReturnsOnCall map[int]struct {
		result1 *client.ChunkedResponse
		result2 error
	}
	WriteStub        func(client.BatchPoints) error
	writeMutex       sync.RWMutex
	writeArgsForCall []struct {
		arg1 client.BatchPoints
	}
	writeReturns struct {
		result1 error
	}
	writeReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeInfluxDBClient) Close() error {
	fake.closeMutex.Lock()
	ret, specificReturn := fake.closeReturnsOnCall[len(fake.closeArgsForCall)]
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct {
	}{})
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if fake.CloseStub != nil {
		return fake.CloseStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.closeReturns
	return fakeReturns.result1
}

func (fake *FakeInfluxDBClient) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakeInfluxDBClient) CloseCalls(stub func() error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = stub
}

func (fake *FakeInfluxDBClient) CloseReturns(result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeInfluxDBClient) CloseReturnsOnCall(i int, result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	if fake.closeReturnsOnCall == nil {
		fake.closeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.closeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeInfluxDBClient) Ping(arg1 time.Duration) (time.Duration, string, error) {
	fake.pingMutex.Lock()
	ret, specificReturn := fake.pingReturnsOnCall[len(fake.pingArgsForCall)]
	fake.pingArgsForCall = append(fake.pingArgsForCall, struct {
		arg1 time.Duration
	}{arg1})
	fake.recordInvocation("Ping", []interface{}{arg1})
	fake.pingMutex.Unlock()
	if fake.PingStub != nil {
		return fake.PingStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.pingReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeInfluxDBClient) PingCallCount() int {
	fake.pingMutex.RLock()
	defer fake.pingMutex.RUnlock()
	return len(fake.pingArgsForCall)
}

func (fake *FakeInfluxDBClient) PingCalls(stub func(time.Duration) (time.Duration, string, error)) {
	fake.pingMutex.Lock()
	defer fake.pingMutex.Unlock()
	fake.PingStub = stub
}

func (fake *FakeInfluxDBClient) PingArgsForCall(i int) time.Duration {
	fake.pingMutex.RLock()
	defer fake.pingMutex.RUnlock()
	argsForCall := fake.pingArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeInfluxDBClient) PingReturns(result1 time.Duration, result2 string, result3 error) {
	fake.pingMutex.Lock()
	defer fake.pingMutex.Unlock()
	fake.PingStub = nil
	fake.pingReturns = struct {
		result1 time.Duration
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeInfluxDBClient) PingReturnsOnCall(i int, result1 time.Duration, result2 string, result3 error) {
	fake.pingMutex.Lock()
	defer fake.pingMutex.Unlock()
	fake.PingStub = nil
	if fake.pingReturnsOnCall == nil {
		fake.pingReturnsOnCall = make(map[int]struct {
			result1 time.Duration
			result2 string
			result3 error
		})
	}
	fake.pingReturnsOnCall[i] = struct {
		result1 time.Duration
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeInfluxDBClient) Query(arg1 client.Query) (*client.Response, error) {
	fake.queryMutex.Lock()
	ret, specificReturn := fake.queryReturnsOnCall[len(fake.queryArgsForCall)]
	fake.queryArgsForCall = append(fake.queryArgsForCall, struct {
		arg1 client.Query
	}{arg1})
	fake.recordInvocation("Query", []interface{}{arg1})
	fake.queryMutex.Unlock()
	if fake.QueryStub != nil {
		return fake.QueryStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.queryReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeInfluxDBClient) QueryCallCount() int {
	fake.queryMutex.RLock()
	defer fake.queryMutex.RUnlock()
	return len(fake.queryArgsForCall)
}

func (fake *FakeInfluxDBClient) QueryCalls(stub func(client.Query) (*client.Response, error)) {
	fake.queryMutex.Lock()
	defer fake.queryMutex.Unlock()
	fake.QueryStub = stub
}

func (fake *FakeInfluxDBClient) QueryArgsForCall(i int) client.Query {
	fake.queryMutex.RLock()
	defer fake.queryMutex.RUnlock()
	argsForCall := fake.queryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeInfluxDBClient) QueryReturns(result1 *client.Response, result2 error) {
	fake.queryMutex.Lock()
	defer fake.queryMutex.Unlock()
	fake.QueryStub = nil
	fake.queryReturns = struct {
		result1 *client.Response
		result2 error
	}{result1, result2}
}

func (fake *FakeInfluxDBClient) QueryReturnsOnCall(i int, result1 *client.Response, result2 error) {
	fake.queryMutex.Lock()
	defer fake.queryMutex.Unlock()
	fake.QueryStub = nil
	if fake.queryReturnsOnCall == nil {
		fake.queryReturnsOnCall = make(map[int]struct {
			result1 *client.Response
			result2 error
		})
	}
	fake.queryReturnsOnCall[i] = struct {
		result1 *client.Response
		result2 error
	}{result1, result2}
}

func (fake *FakeInfluxDBClient) QueryAsChunk(arg1 client.Query) (*client.ChunkedResponse, error) {
	fake.queryAsChunkMutex.Lock()
	ret, specificReturn := fake.queryAsChunkReturnsOnCall[len(fake.queryAsChunkArgsForCall)]
	fake.queryAsChunkArgsForCall = append(fake.queryAsChunkArgsForCall, struct {
		arg1 client.Query
	}{arg1})
	fake.recordInvocation("QueryAsChunk", []interface{}{arg1})
	fake.queryAsChunkMutex.Unlock()
	if fake.QueryAsChunkStub != nil {
		return fake.QueryAsChunkStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.queryAsChunkReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeInfluxDBClient) QueryAsChunkCallCount() int {
	fake.queryAsChunkMutex.RLock()
	defer fake.queryAsChunkMutex.RUnlock()
	return len(fake.queryAsChunkArgsForCall)
}

func (fake *FakeInfluxDBClient) QueryAsChunkCalls(stub func(client.Query) (*client.ChunkedResponse, error)) {
	fake.queryAsChunkMutex.Lock()
	defer fake.queryAsChunkMutex.Unlock()
	fake.QueryAsChunkStub = stub
}

func (fake *FakeInfluxDBClient) QueryAsChunkArgsForCall(i int) client.Query {
	fake.queryAsChunkMutex.RLock()
	defer fake.queryAsChunkMutex.RUnlock()
	argsForCall := fake.queryAsChunkArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeInfluxDBClient) QueryAsChunkReturns(result1 *client.ChunkedResponse, result2 error) {
	fake.queryAsChunkMutex.Lock()
	defer fake.queryAsChunkMutex.Unlock()
	fake.QueryAsChunkStub = nil
	fake.queryAsChunkReturns = struct {
		result1 *client.ChunkedResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeInfluxDBClient) QueryAsChunkReturnsOnCall(i int, result1 *client.ChunkedResponse, result2 error) {
	fake.queryAsChunkMutex.Lock()
	defer fake.queryAsChunkMutex.Unlock()
	fake.QueryAsChunkStub = nil
	if fake.queryAsChunkReturnsOnCall == nil {
		fake.queryAsChunkReturnsOnCall = make(map[int]struct {
			result1 *client.ChunkedResponse
			result2 error
		})
	}
	fake.queryAsChunkReturnsOnCall[i] = struct {
		result1 *client.ChunkedResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeInfluxDBClient) Write(arg1 client.BatchPoints) error {
	fake.writeMutex.Lock()
	ret, specificReturn := fake.writeReturnsOnCall[len(fake.writeArgsForCall)]
	fake.writeArgsForCall = append(fake.writeArgsForCall, struct {
		arg1 client.BatchPoints
	}{arg1})
	fake.recordInvocation("Write", []interface{}{arg1})
	fake.writeMutex.Unlock()
	if fake.WriteStub != nil {
		return fake.WriteStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.writeReturns
	return fakeReturns.result1
}

func (fake *FakeInfluxDBClient) WriteCallCount() int {
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	return len(fake.writeArgsForCall)
}

func (fake *FakeInfluxDBClient) WriteCalls(stub func(client.BatchPoints) error) {
	fake.writeMutex.Lock()
	defer fake.writeMutex.Unlock()
	fake.WriteStub = stub
}

func (fake *FakeInfluxDBClient) WriteArgsForCall(i int) client.BatchPoints {
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	argsForCall := fake.writeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeInfluxDBClient) WriteReturns(result1 error) {
	fake.writeMutex.Lock()
	defer fake.writeMutex.Unlock()
	fake.WriteStub = nil
	fake.writeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeInfluxDBClient) WriteReturnsOnCall(i int, result1 error) {
	fake.writeMutex.Lock()
	defer fake.writeMutex.Unlock()
	fake.WriteStub = nil
	if fake.writeReturnsOnCall == nil {
		fake.writeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.writeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeInfluxDBClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	fake.pingMutex.RLock()
	defer fake.pingMutex.RUnlock()
	fake.queryMutex.RLock()
	defer fake.queryMutex.RUnlock()
	fake.queryAsChunkMutex.RLock()
	defer fake.queryAsChunkMutex.RUnlock()
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeInfluxDBClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ emitter.InfluxDBClient = new(FakeInfluxDBClient)
