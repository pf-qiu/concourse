// Code generated by counterfeiter. DO NOT EDIT.
package wrappafakes

import (
	"sync"

	"github.com/pf-qiu/concourse/v6/atc/wrappa"
)

type FakeConcurrentRequestPolicy struct {
	HandlerPoolStub        func(string) (wrappa.Pool, bool)
	handlerPoolMutex       sync.RWMutex
	handlerPoolArgsForCall []struct {
		arg1 string
	}
	handlerPoolReturns struct {
		result1 wrappa.Pool
		result2 bool
	}
	handlerPoolReturnsOnCall map[int]struct {
		result1 wrappa.Pool
		result2 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeConcurrentRequestPolicy) HandlerPool(arg1 string) (wrappa.Pool, bool) {
	fake.handlerPoolMutex.Lock()
	ret, specificReturn := fake.handlerPoolReturnsOnCall[len(fake.handlerPoolArgsForCall)]
	fake.handlerPoolArgsForCall = append(fake.handlerPoolArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("HandlerPool", []interface{}{arg1})
	fake.handlerPoolMutex.Unlock()
	if fake.HandlerPoolStub != nil {
		return fake.HandlerPoolStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.handlerPoolReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeConcurrentRequestPolicy) HandlerPoolCallCount() int {
	fake.handlerPoolMutex.RLock()
	defer fake.handlerPoolMutex.RUnlock()
	return len(fake.handlerPoolArgsForCall)
}

func (fake *FakeConcurrentRequestPolicy) HandlerPoolCalls(stub func(string) (wrappa.Pool, bool)) {
	fake.handlerPoolMutex.Lock()
	defer fake.handlerPoolMutex.Unlock()
	fake.HandlerPoolStub = stub
}

func (fake *FakeConcurrentRequestPolicy) HandlerPoolArgsForCall(i int) string {
	fake.handlerPoolMutex.RLock()
	defer fake.handlerPoolMutex.RUnlock()
	argsForCall := fake.handlerPoolArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeConcurrentRequestPolicy) HandlerPoolReturns(result1 wrappa.Pool, result2 bool) {
	fake.handlerPoolMutex.Lock()
	defer fake.handlerPoolMutex.Unlock()
	fake.HandlerPoolStub = nil
	fake.handlerPoolReturns = struct {
		result1 wrappa.Pool
		result2 bool
	}{result1, result2}
}

func (fake *FakeConcurrentRequestPolicy) HandlerPoolReturnsOnCall(i int, result1 wrappa.Pool, result2 bool) {
	fake.handlerPoolMutex.Lock()
	defer fake.handlerPoolMutex.Unlock()
	fake.HandlerPoolStub = nil
	if fake.handlerPoolReturnsOnCall == nil {
		fake.handlerPoolReturnsOnCall = make(map[int]struct {
			result1 wrappa.Pool
			result2 bool
		})
	}
	fake.handlerPoolReturnsOnCall[i] = struct {
		result1 wrappa.Pool
		result2 bool
	}{result1, result2}
}

func (fake *FakeConcurrentRequestPolicy) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.handlerPoolMutex.RLock()
	defer fake.handlerPoolMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeConcurrentRequestPolicy) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ wrappa.ConcurrentRequestPolicy = new(FakeConcurrentRequestPolicy)
